//——————————————————————————————————————————————————————————————————————————————
// Common Design: Layout
//——————————————————————————————————————————————————————————————————————————————

html {
  //background: $cd-blue-grey;
  height: 100%;
}

body {
  min-height: 100%;

  // Position footer at the bottom of viewport. This might need adjusting based on page layout.
  &:not(.user-logged-in) {
    @supports (display: grid) {
      display: grid;
      grid-template-rows: 1fr auto;
    }
  }
}

.cd-layout-container {
  //background: $cd-white;
  margin: 0 auto;
  //max-width: $cd-max-body-width;
  min-height: 100%;
  padding: 0;

  // helper for @support testing. Enable background for colours.
  //background: rgba(255, 0, 0, 0.1);

  // sass-lint:disable no-empty-rulesets
  @supports (display: flex) {
    //background: rgba(0, 255, 0, 0.1);
  }

  // Grid is used to fix the footer to the bottom of the screen, regardless of page min-height.
  @supports (display: grid) {
    //background: rgba(0, 0, 255, 0.1);
    @include tablet {
      display: grid;
      grid-template-rows: 101px 1fr auto; // Height of header.

      .no-js & {
        grid-template-rows: 292px 1fr auto; // Height of header with OCHA services expanded.
      }
    }
  }

  .no-js & {
    display: block;
  }
}

.cd-container {
  @include clearfix;
  box-sizing: border-box;
  padding: 0 $cd-container-padding;
  margin: 0 auto;
  width: 100%;
  max-width: $cd-max-width;

  @include tablet {
    padding: 0 $cd-container-padding-tablet;
  }

  @include xlarge {
    padding: 0 $cd-container-padding-xlarge;
  }
}

.cd-container[role='main'] {
  padding-bottom: 2rem;

  @include desktop {
    padding-bottom: 4rem;
  }
}

//@TODO This element (main) is one of the core layout elements.
// Using the element as a selector, instead of a unique class
// means I cannot @extend the rule below, for the inner layout rules.
// .cd-container is used as a utility class on other divs, for common padding, width control.
.cd-layout-container main.cd-container {
  padding-top: 2rem;
  background: $cd-white;

  @include tablet {
    padding-top: 3rem;
    display: flex;
    flex-wrap: wrap;
  }
}

.cd-layout-container main.cd-container aside {
  // This is to prevent sidebar region wrapper div displaying when region is empty but still renders.
  &:empty {
    display: none;
  }

  @include tablet {
    flex-grow: 1;
  }

  .cd-layout-sidebar-first & {
    margin-bottom: 1rem;
    @include tablet {
      margin-bottom: 0;
    }
  }
}

// One sidebar.
.cd-layout-with-sidebar-first .cd-layout-sidebar-first,
.cd-layout-with-sidebar-second .cd-layout-sidebar-second {
  @include tablet {
    flex-basis: 285px;
  }
}

.cd-layout-sidebar-first {
  //background: lightblue;
  margin-bottom: 1rem;

  @include tablet {
    margin-bottom: 0;
  }
}

.cd-layout-sidebar-second {
  //background: lightpink;
}

// Both sidebars, individually control.
.cd-layout-with-sidebar-both {
  .cd-layout-sidebar-first {
    margin-bottom: 1rem;

    @include tablet {
      flex-basis: 285px;
    }

    @include desktop {
      margin-bottom: 0;
    }
  }

  .cd-layout-sidebar-second {
    @include tablet {
      flex-basis: 500px; // Keep this number large so exceeds the available space and thus sits below.
    }
    @include desktop {
      flex-basis: 285px;
    }
  }
}

.cd-layout-content {
  //background: lightyellow;

  @include tablet {
    flex-basis: 0;
    flex-grow: 999;
    //min-width: 50%;
  }

  // sass-lint:disable no-duplicate-properties
  .cd-layout-with-sidebar-first &,
  .cd-layout-with-sidebar-second & {
    min-width: auto; //IE11 fix.
    min-width: unset;
  }

  .cd-layout-with-sidebar-both & {
    margin-bottom: 1rem;

    @include tablet {
      margin-left: 3rem;

      [dir='rtl'] & {
        margin-left: 0;
        margin-right: 3rem;
      }
    }

    @include desktop {
      margin-right: 3rem;
      margin-bottom: 0;

      [dir='rtl'] & {
        margin-right: 0;
        margin-left: 3rem;
      }
    }
  }

  .cd-layout-with-sidebar-first & {
    @include tablet {
      margin-left: 3rem;
      margin-right: 0;

      [dir='rtl'] & {
        margin-left: 0;
        margin-right: 3rem;
      }
    }
  }

  .cd-layout-with-sidebar-second & {
    margin-bottom: 1rem;

    @include tablet {
      margin-left: 0;
      margin-right: 3rem;
      margin-bottom: 0;

      [dir='rtl'] & {
        margin-left: 3rem;
        margin-right: 0;
      }
    }
  }
}

// Faux sidebar in Node content.
// Requires markup in node-full.html.twig.
section.cd-layout-two-col {
  @include desktop {
    display: flex;
    flex-wrap: wrap;
  }

  .cd-layout-main-content {
    // These override the main layout rules based on which sidebar is enabled.
    // The status of those sidebars are not important to this inner layout.
    margin-left: 0;

    @include desktop {
      margin-right: 2rem;
      flex-basis: 0;
      flex-grow: 999;

      [dir='rtl'] & {
        margin-right: 0;
        margin-left: 2rem;
      }
    }
  }

  .cd-layout-sidebar-first {
    margin-top: 1rem;

    // I've styled this as a block with padding and bg colour.
    padding: 1rem;
    background-color: $cd-blue-grey--light;

    @include desktop {
      flex-basis: 285px;
      margin-top: 0;
    }
  }
}


.region-sidebar-first:empty,
.region-facets:empty {
  display: none;
}

.region-facets + .region-sidebar-first {
  margin-top: 2rem;

  @include desktop {
    margin-top: 1rem;
  }
}

// Page title.
.cd-page-title + main.cd-container {
  padding-top: 0;
}

.cd-page-title {
  margin-top: 2rem;

  @include tablet {
    margin-top: 3rem; // Matches main.cd-container.
  }
}

.page-title {
  @include xl {
    padding-right: calc(285px + 3rem); // width of sidebar plus content div right margin.

    [dir='rtl'] & {
      padding-right: 0;
      padding-left: calc(285px + 3rem);
    }
  }
}

// Hide page title on homepage
//.path-frontpage .page-title {
//  display: none;
//}

// Remove margin from page title on homepage
//.path-frontpage .page-title {
//  margin-top: 0;
//}
