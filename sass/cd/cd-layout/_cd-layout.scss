//——————————————————————————————————————————————————————————————————————————————
// Common Design: Layout
//——————————————————————————————————————————————————————————————————————————————

html {
  height: 100%;
}

body {
  min-height: 100%;

  // Position footer at the bottom of viewport. This might need adjusting based on page layout.
  &:not(.user-logged-in) {
    @supports (display: grid) {
      display: grid;
      grid-template-rows: 1fr auto;
    }
  }
}

.cd-layout-container {
  width: 100%;
  min-height: 100%;
  margin: 0 auto;
  padding: 0;

  .no-js & {
    display: block;
  }

  // helper for @support testing. Enable background for colours.
  //background: rgba(255, 0, 0, 0.1);

  // sass-lint:disable no-empty-rulesets
  @supports (display: flex) {
    //background: rgba(0, 255, 0, 0.1);
  }

  // Grid is used to fix the footer to the bottom of the screen, regardless of page min-height.
  // Header height is fixed.
  // Highlighted should contain Drupal messages and will be present even if empty.
  // Main should grow to fit the available space.
  // Soft footer is optional.
  // Footer sticks to the bottom of the viewport.
  // If there are additional direct descendents of .cd-layout-container, grid-template-areas and rows can be adjusted.
  @supports (display: grid) {
    //background: rgba(0, 0, 255, 0.1);
    @include tablet {
      display: grid;
      grid-template-areas:
        "header"
        "highlighted"
        "main"
        "soft-footer"
        "footer";
      grid-template-rows: 101px auto 1fr auto;
      grid-auto-rows: auto;
    }
  }
}

.cd-container {
  @include clearfix;

  box-sizing: border-box;
  width: 100%;
  max-width: $cd-max-width;
  margin: 0 auto;
  padding: 0 $cd-container-padding;

  @include tablet {
    padding: 0 $cd-container-padding-tablet;
  }

  @include xlarge {
    padding: 0 $cd-container-padding-xlarge;
  }
}

.cd-container[role="main"] {
  padding-bottom: 2rem;

  @include desktop {
    padding-bottom: 4rem;
  }
}

.cd-layout-container main {
  padding-top: 2rem;

  @include desktop {
    padding-top: 3rem;
  }
}

.cd-layout-container .cd-layout-content-wrapper {
  @include desktop {
    display: flex;
    flex-wrap: wrap;
  }
}

.cd-layout-container .cd-layout-content-wrapper aside {
  // This is to prevent sidebar region wrapper div displaying when region is empty but still renders.
  &:empty {
    display: none;
  }

  .cd-layout-sidebar-first & {
    margin-bottom: 2rem;

    @include desktop {
      margin-bottom: 0;
    }
  }

  @include desktop {
    flex-grow: 1;
  }
}

.cd-layout-sidebar-first {
  //background: lightblue;
  margin-bottom: 1rem;

  @include desktop {
    margin-bottom: 0;
  }
}

// One sidebar.
.cd-layout-with-sidebar-first .cd-layout-sidebar-first,
.cd-layout-with-sidebar-second .cd-layout-sidebar-second {
  @include desktop {
    flex-basis: 285px;
  }
}

//.cd-layout-sidebar-second {
//  background: lightpink;
//}

// Both sidebars, individually control.
.cd-layout-with-sidebar-both {
  .cd-layout-sidebar-first {
    margin-bottom: 1rem;

    @include tablet {
      flex-basis: 285px;
    }

    @include desktop {
      margin-bottom: 0;
    }
  }

  .cd-layout-sidebar-second {
    @include tablet {
      flex-basis: 550px; // Keep this number large so exceeds the available space and thus sits below.
    }

    @include desktop {
      flex-basis: 285px;
    }
  }
}

.cd-layout-content {

  .cd-layout-with-sidebar-both & {
    margin-bottom: 1rem;

    @include desktop {
      margin-bottom: 0;

      [dir="ltr"] & {
        margin-right: 3rem;
        margin-left: 3rem;
      }

      [dir="rtl"] & {
        margin-right: 3rem;
        margin-left: 3rem;
      }
    }
  }

  .cd-layout-with-sidebar-first & {
    @include desktop {
      [dir="ltr"] & {
        margin-right: 0;
        margin-left: 3rem;
      }

      [dir="rtl"] & {
        margin-right: 3rem;
        margin-left: 0;
      }
    }
  }

  .cd-layout-with-sidebar-second & {
    margin-bottom: 1rem;

    @include desktop {
      margin-bottom: 0;

      [dir="ltr"] & {
        margin-right: 3rem;
        margin-left: 0;
      }

      [dir="rtl"] & {
        margin-right: 0;
        margin-left: 3rem;
      }
    }
  }
  //background: lightyellow;

  @include desktop {
    flex-basis: 0;
    flex-grow: 999;
  }
}

// Faux sidebar in Node content.
// Requires markup in node-full.html.twig.
.cd-layout-two-col {

  .cd-layout-main-content {
    // These override the main layout rules based on which sidebar is enabled.
    // The status of those sidebars are not important to this inner layout.
    margin-left: 0;

    @include desktop {
      flex-basis: 0;
      flex-grow: 999;

      [dir="ltr"] & {
        margin-right: 2rem;
      }

      [dir="rtl"] & {
        margin-left: 2rem;
      }
    }
  }

  .cd-layout-sidebar-first {
    margin-top: 1rem;

    // I've styled this as a block with padding and bg colour.
    padding: 1rem;
    background-color: $cd-blue-grey--light;

    @include desktop {
      flex-basis: 285px;
      margin-top: 0;
    }
  }

  @include desktop {
    display: flex;
    flex-wrap: wrap;
  }
}

.region-sidebar-first:empty,
.region-facets:empty {
  display: none;
}

.region-facets + .region-sidebar-first {
  margin-top: 2rem;

  @include desktop {
    margin-top: 1rem;
  }
}

//.cd-page-title {
//  margin-top: 2rem;
//
//  @include tablet {
//    margin-top: 3rem; // Matches .cd-layout-content-wrapper.
//  }
//}

.cd-page-title {
  @include xl {
    .cd-layout-with-sidebar {
      [dir="ltr"] & {
        padding-right: 320px; // --cd-max-width minus padding, minus --cd-max-content-width.
      }

      [dir="rtl"] & {
        padding-left: 320px;
      }
    }

    .cd-layout-with-sidebar-first &,
    .cd-layout-with-sidebar-second &,
    .cd-layout-with-sidebar-both & {
      padding-right: 0;
      padding-left: 0;
    }
  }
}
