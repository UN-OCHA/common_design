<?php

/**
 * @file
 * Template overrides, preprocess, and alter hooks for the OCHA Common Design theme.
 */

use Drupal\Core\Form\FormStateInterface;

function common_design_preprocess(&$variables, $hook) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }
  // Ensure the cache varies correctly.
  $variables['#cache']['contexts'][] = 'url.path.is_front';

  //Check if Components module is enabled, to prevent page--demo.html.twig breaking due to twig errors.
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('components')){
    $variables['componentsModule'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Remove the default page title and local tasks blocks if they were already
 * rendered by a page title paragraph or when viewing full article nodes.
 *
 */
function common_design_preprocess_page(&$variables) {
  if (isset($variables['node'])) {
    $rendered = &drupal_static('common_design_rendered_blocks');

    // If the block has already been rendered (from the page title block) then
    // we remove the default page title block.
    if (isset($rendered['page_title_block'])) {
      unset($variables['page']['content']['common_design_page_title']);
    }

    // Same for the local tasks block.
    if (isset($rendered['local_tasks_block'])) {
      unset($variables['page']['content']['common_design_local_tasks']);
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Use the page title block for the title and display the local tasks below it.
 * We use common_design_get_block_render_array() that will cache the
 * render array of the blocks so that they are not re-rendered and displayed
 * again.
 *
 * @see common_design_preprocess_page()
 * @see common_design_get_block_render_array()
 */
function common_design_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Prepare the title and local tasks so we have better control over where
  // to display them for content in full node.
  $view_mode = $variables['view_mode'] ?? '';
  if ($view_mode === 'full') {
    $variables['title'] = common_design_get_block_render_array('page_title_block');
    $variables['local_tasks'] = common_design_get_block_render_array('local_tasks_block', FALSE);
  }
}

/**
 * @param $suggestions
 * @param array $variables
 */
function common_design_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }
}

function common_design_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__'.$variables['element']['#id'];
}


/**
 * Implements hook_form_alter().
 */
function common_design_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // This is for Drupal core search block.
  if ($form_id == 'search_block_form') {
    $form['#attributes']['class'][] = 'cd-search__form';
    $form['#attributes']['aria-labelledby'][] = 'cd-search-form';
    $form['#attributes']['data-cd-toggable'][] = 'Search';
    $form['#attributes']['data-cd-icon'][] = '';
    $form['#attributes']['data-cd-component'][] = 'cd-search';
    $form['#attributes']['data-cd-logo'][] = 'search';
    // Focus the input when clicking on the toggler button.
    $form['#attributes']['data-cd-focus-target'] = 'cd-search';
    $form['keys']['#attributes']['placeholder'][] = t('What are you looking for?');
    $form['keys']['#attributes']['class'][] = 'cd-search__input';
    $form['keys']['#attributes']['id'][] = 'cd-search';
    $form['keys']['#attributes']['autocomplete'][] = 'off';
    // Theme suggestion for submit element.
    $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'search_submit';
    $form['actions']['submit']['#attributes']['class'][] = 'cd-search__submit';
    $form['actions']['submit']['#attributes']['value'][] = 'Search';

    // This is for a Drupal core INLINE search block.
    // There are templates needed for this. Replace cd-search.html.twig
    // with cd-search--inline.html.twig in cd-site-header.html.twig.
//    $form['#attributes']['class'][] = 'cd-search--inline__form';
//    $form['#attributes']['aria-labelledby'][] = 'cd-search-form--inline';
//    $form['#attributes']['data-cd-toggable'][] = 'Search';
//    $form['#attributes']['data-cd-icon'][] = '';
//    $form['#attributes']['data-cd-component'][] = 'cd-search--inline';
//    $form['#attributes']['data-cd-logo'][] = 'search';
//    // Focus the input when clicking on the toggler button.
//    $form['#attributes']['data-cd-focus-target'] = 'cd-search--inline';
//    $form['keys']['#attributes']['placeholder'][] = t('What are you looking for?');
//    $form['keys']['#attributes']['class'][] = 'cd-search--inline__input';
//    $form['keys']['#attributes']['type'][] = 'search';
//    $form['keys']['#attributes']['id'][] = 'cd-search--inline';
//    $form['keys']['#attributes']['autocomplete'][] = 'off';
//    // Theme suggestion for submit element.
//    $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'search_submit';
//    $form['actions']['submit']['#attributes']['class'][] = 'cd-search--inline__submit';
//    $form['actions']['submit']['#attributes']['value'][] = 'Search';
  }

  // To use this for Views exposed forms, copy the form alter hook into your
  // subtheme and add the relevant Views IDs to this array in your subtheme.
  $includeView = [];

  // If in array above, add attributes for styling and behaviour.
  // Replace $form['keys'] with the appropriate fulltext input eg. $form['search_api_fulltext'].
  if (in_array($form['#id'], $includeView)) {
    $form['#attributes']['class'][] = 'cd-search__form';
    $form['#attributes']['aria-labelledby'][] = 'cd-search-form';
    $form['#attributes']['data-cd-toggable'][] = 'Search';
    $form['#attributes']['data-cd-icon'][] = '';
    $form['#attributes']['data-cd-component'][] = 'cd-search';
    $form['#attributes']['data-cd-logo'][] = 'search';
    // Focus the input when clicking on the toggler button.
    $form['#attributes']['data-cd-focus-target'] = 'cd-search';
    $form['keys']['#attributes']['placeholder'] = t('What are you looking for?');
    $form['keys']['#attributes']['class'][] = 'cd-search__input';
    $form['keys']['#attributes']['type'][] = 'search';
    $form['keys']['#attributes']['id'][] = 'cd-search';
    $form['keys']['#attributes']['autocomplete'][] = 'off';
    // Theme suggestion for submit element.
    $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'search_submit';
    $form['actions']['submit']['#attributes']['class'][] = 'cd-search__submit';
    $form['actions']['submit']['#attributes']['value'][] = 'Search';

    // This is for a Views exposed form INLINE search block.
    // There are templates needed for this. Replace cd-search.html.twig
    // with cd-search--inline.html.twig in cd-site-header.html.twig.
//      $form['#attributes']['class'][] = 'cd-search--inline__form';
//      $form['#attributes']['aria-labelledby'][] = 'cd-search-form--inline';
//      $form['#attributes']['data-cd-toggable'][] = 'Search';
//      $form['#attributes']['data-cd-icon'][] = '';
//      $form['#attributes']['data-cd-component'][] = 'cd-search--inline';
//      $form['#attributes']['data-cd-logo'][] = 'search';
//      // Focus the input when clicking on the toggler button.
//      $form['#attributes']['data-cd-focus-target'] = 'cd-search--inline';
//      $form['keys']['#attributes']['placeholder'][] = t('What are you looking for?');
//      $form['keys']['#attributes']['class'][] = 'cd-search--inline__input';
//      $form['keys']['#attributes']['type'][] = 'search';
//      $form['keys']['#attributes']['id'][] = 'cd-search--inline';
//      $form['keys']['#attributes']['autocomplete'][] = 'off';
//      // Theme suggestion for submit element.
//      $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'search_submit';
//      $form['actions']['submit']['#attributes']['class'][] = 'cd-search--inline__submit';
//      $form['actions']['submit']['#attributes']['value'][] = 'Search';
  }
}

/**
 * Implements hook_preprocess_html().
 */
function common_design_preprocess_html(&$vars) {
  // SVG sprite
  // Get the contents of the SVG sprite.
  $icons = file_get_contents( drupal_get_path('theme', 'common_design') . '/img/icons/cd-icons-sprite.svg');

  // Add a new render array to page_bottom so the icons
  // get added to the page.
  $vars['page_bottom']['icons'] = array(
    '#type' => 'inline_template',
    '#template' => '<span class="hidden">' . $icons . '</span>',
  );

  // Check if current request is an exception to get error type
  $status_code = \Drupal::requestStack()->getCurrentRequest()->attributes->get('exception');

  // add body classes.
  if ($status_code && $status_code->getStatusCode() == 404) {
    $vars['attributes']['class'][] = 'path-error path-error--404';
  }

  if ($status_code && $status_code->getStatusCode() == 403) {
    $vars['attributes']['class'][] = 'path-error path-error--403';
  }

  // Add a script to detect whether javascript is enabled or not and then
  // replace the `no-js` class with the `js` one.
  // Drupal.js does this but way too late on first load causing issues with
  // css rules that rely on the `js` class being defined or not.
  $js_detection = [
    '#tag' => 'script',
    '#value' => "document.documentElement.className = document.documentElement.className.replace('no-js', typeof document.addEventListener !== 'undefined' ? 'js' : 'no-js');",
    '#weight' => -1,
  ];
  $vars['page']['#attached']['html_head'][] = [$js_detection, 'js-detection'];
}

/**
/ * Implements hook_theme_suggestions_HOOK_alter().
 */
function common_design_theme_suggestions_page_alter(array &$suggestions, array $variables, $hook) {
  $current_uri = \Drupal::request()->getRequestUri();
  // Set variable based on path alias to include Component demo page.
  if ($current_uri == '/demo') {
    $suggestions[] = $hook . '__' . 'demo';
  }

  /**
   * error page template suggestions.
   */
  if (!is_null(Drupal::requestStack()->getCurrentRequest()->attributes->get('exception'))) {
    $status_code = Drupal::requestStack()->getCurrentRequest()->attributes->get('exception')->getStatusCode();
    $suggestions[] = 'page__' . (string) $status_code;
  }
}

/**
 * Implements hook_block__language_block().
 */
function common_design_preprocess_block__language_block(&$vars) {
  // Current language available in template override.
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $vars['language'] = $language;
}

/**
 * Implements hook_preprocess_menu().
 */
function common_design_preprocess_menu(&$variables, $hook) {
  if ($hook == 'menu__account') {
    // Add username.
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    $variables['username'] = $user->getDisplayName();
    $variables['#cache']['contexts'][] = 'user';
  }
}

/**
 * Render a block.
 *
 * We cache a flag indicating the block has already been redendered and return
 * an empty array in that case to ensure that the block is displayed only one
 * on the page.
 *
 * @param string $id
 *   Block ID.
 * @param bool $translate
 *   Translate the block or not. This allows to keep some elements of the page
 *   in the site's default language for example like the local tasks (view, edit
 *   etc.).
 *
 * @return array
 *   Renderable array of the block. Empty array if this was already called
 *   before to avoid displaying the block several times.
 *
 * @see https://drupal.stackexchange.com/a/171733
 */
function common_design_get_block_render_array($id, $translate = TRUE) {
  $rendered = &drupal_static('common_design_rendered_blocks');

  if (!isset($rendered[$id])) {
    // Prevent rendering the block several times.
    $rendered[$id] = TRUE;

    // Generate an instance of the plugin block.
    $block_manager = \Drupal::service('plugin.manager.block');
    $plugin_block = $block_manager->createInstance($id, []);

    // Skip if there is no block matching the id.
    if (empty($plugin_block)) {
      return [];
    }

    // Check if the block is accessible to the current user.
    $access = $plugin_block->access(\Drupal::currentUser());
    // This can be a boolean or an object implementing AccessResultInterface.
    if ($access === TRUE || ($access instanceof AccessResultInterface && $access->isAllowed())) {
      return $plugin_block->build();
    }
  }

  return [];
}
